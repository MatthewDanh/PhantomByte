import React, { useMemo } from 'react';
import type { Location } from '../types';

interface WorldMapProps {
    traceHistory: Location[];
}

// Pre-defined coordinates for major cities (approximations for a 1000x500 map)
const cityCoordinates: Record<string, { x: number; y: number }> = {
    'Seoul': { x: 840, y: 160 },
    'Tokyo': { x: 880, y: 165 },
    'Beijing': { x: 810, y: 140 },
    'Berlin': { x: 530, y: 100 },
    'London': { x: 490, y: 105 },
    'Paris': { x: 500, y: 120 },
    'Moscow': { x: 600, y: 90 },
    'New York': { x: 280, y: 140 },
    'San Francisco': { x: 160, y: 150 },
    'Los Angeles': { x: 170, y: 170 },
    'Rio de Janeiro': { x: 360, y: 380 },
    'Cairo': { x: 580, y: 180 },
    'Sydney': { x: 920, y: 410 },
    'Singapore': { x: 780, y: 280 },
};

const WorldMap: React.FC<WorldMapProps> = ({ traceHistory }) => {

    const uniqueLocations = useMemo(() => {
        const seen = new Set();
        return traceHistory.filter(loc => {
            const duplicate = seen.has(loc.city);
            seen.add(loc.city);
            return !duplicate && cityCoordinates[loc.city];
        });
    }, [traceHistory]);

    const lastLocation = uniqueLocations.length > 0 ? uniqueLocations[uniqueLocations.length - 1] : null;

    return (
        <div className="w-full neumorphic-inset gradient-border p-4 relative aspect-video">
             <div className="absolute top-2 left-4 z-10">
                <h3 className="font-hacker text-xl text-cyan-400 tracking-wider">GLOBAL TRACE</h3>
                {lastLocation && (
                     <p className="text-purple-300 animate-pulse-cyan">{lastLocation.city}, {lastLocation.country}</p>
                )}
            </div>
            <svg viewBox="0 0 1000 562.5" className="w-full h-full">
                {/* Simplified World Map Path */}
                <path d="M499.99999,0.57398c-112.91001,0 -213.34,36.215 -290.7,96.39 -20.08,15.6 -38.69,32.88 -55.6,51.52 -21.46,23.64 -39.3,50.14 -52.7,78.38 -15.43,32.53 -22.9,67.8 -22.9,103.13 0,111.43 89.26,201.87 199.3,201.87 23.32,0 45.5,-4.02 65.9,-11.45 2.11,-0.75 4.19,-1.54 6.2,-2.38 2.08,-0.84 4.14,-1.7 6.2,-2.55 12.06,-5.04 23.5,-10.88 34.3,-17.47 18.33,-11.23 34.8,-24.58 48.9,-39.62 13.9,-14.8 25.5,-31.02 34.6,-48.33 2.87,-5.46 5.5,-11.08 7.9,-16.8 0.5,-1.18 0.9,-2.35 1.4,-3.53 13.43,-32.14 36.3,-58.55 65.5,-75.78 6.42,-3.8 13.04,-7.23 19.8,-10.28 15.6,-6.99 32.1,-11.83 49.3,-14.28 2.4,-0.34 4.8,-0.65 7.2,-0.92 2.5,-0.27 5,-0.5 7.5,-0.7 20.37,-1.59 41.16,0.37 61.1,5.65 24.38,6.47 46.8,17.44 66.2,32.07 14.77,11.12 27.9,24.11 38.8,38.55 9.02,12.04 16.5,25.07 22.2,38.74 4.8,11.48 8.1,23.48 9.9,35.72 0.3,2.02 0.5,4.04 0.8,6.07 0.9,6.58 1.1,13.2 0.5,19.78 -0.9,10.07 -3.5,19.9 -7.5,29.23 -6.3,14.67 -15.6,27.87 -27.3,39.01 -12.07,11.5 -26.1,20.7 -41.6,27.18 -12.4,5.2 -25.5,8.8 -38.9,10.68 -2.7,0.37 -5.5,0.67 -8.2,0.9 -3.1,0.27 -6.2,0.44 -9.3,0.54 -24.4,0.73 -48.3,-2.87 -70.5,-10.23 -18.7,-6.2 -36,-14.9 -51.2,-25.7 -12.1,-8.5 -22.9,-18.6 -32,-29.9 -6.7,-8.4 -12.4,-17.5 -17,-27.1 -4.1,-8.6 -7.2,-17.6 -9.4,-26.9 -2.6,-11.1 -4,-22.4 -4,-33.9 0,-16.8 2.4,-33.1 7,-48.3 4.2,-14.1 9.9,-27.3 16.9,-39.4 4.7,-8.1 9.9,-15.6 15.6,-22.6 7.6,-9.2 15.9,-17.6 24.9,-25 10.3,-8.5 21.3,-16 32.9,-22.3 20.9,-11.4 43.5,-19.4 67.2,-23.5 22.9,-3.9 46.4,-3.8 69.1,0.3 26.6,4.8 51.5,14.4 73.1,28.1 12,7.6 22.9,16.5 32.5,26.4 12.3,12.7 22.4,26.9 29.8,42.2 6.4,13.2 10.8,27.4 12.9,41.9 2,13.4 2.1,26.9 0.4,40.1 -1.4,11.1 -4.5,21.9 -8.8,32 -5.8,13.5 -13.6,25.9 -23.1,36.7 -12.1,13.8 -26.3,25.4 -42.2,34.4 -21.1,12 -44.1,20.4 -68.3,24.6 -23.1,4.1 -46.8,4.1 -69.8,0 -27.5,-4.9 -53.2,-15.1 -75.7,-29.9 -11.9,-7.9 -22.8,-17.1 -32.5,-27.5 -12.2,-13.2 -22.3,-28.1 -29.8,-44.1 -5.6,-12 -9.7,-24.8 -12.1,-37.9 -2.8,-15.1 -3.8,-30.5 -2.9,-45.8 0.9,-16.5 3.8,-32.7 8.5,-48.1 4,-12.9 9.2,-25.2 15.4,-36.7 4.9,-9 10.5,-17.4 16.9,-25.1 7.2,-8.7 15.2,-16.6 23.9,-23.6 15.2,-12 31.8,-22.4 49.3,-30.7 19.3,-9.1 39.7,-16.2 60.8,-20.9 22,-5 44.6,-7.1 67.2,-6.4 25.1,0.8 49.6,5.6 72.5,14 20.3,7.4 39.3,17.7 56.4,30.5 14.1,10.5 26.9,22.9 37.8,36.7 11.2,14.2 20.3,30 26.8,46.7 4.9,12.5 8.3,25.6 10,39 1.5,11.5 1.5,23.1 0.1,34.5 -2.3,18.7 -8.3,36.7 -17.2,52.8 -10.9,19.6 -25.5,37 -42.9,51.2 -15.1,12.3 -31.9,22.5 -49.9,30.2 -22.5,9.6 -46.2,15.7 -70.5,17.9 -22.4,2 -44.8,0.3 -66.5,-5.2 -26.1,-6.6 -50.5,-18.4 -72,-34.5 -15.1,-11.3 -28.6,-25.1 -39.8,-40.8 -9.1,-12.7 -16.4,-26.8 -21.4,-41.7 -5.4,-15.9 -8.3,-32.6 -8.3,-49.6 0,-29.1 8.8,-57 25.2,-80.7 15.2,-22 35.1,-40.7 58.2,-54.6 24.5,-14.7 52.3,-23.6 81.1,-25.9 28.5,-2.3 57.2,2.2 83.3,13.2 23.1,9.8 44,24.1 61.4,42.1 12.3,12.8 22.6,27.7 30.2,43.9 6.2,13.2 10.4,27.2 12.3,41.5 2.1,15.3 2,30.7 -0.4,45.8 -2,12.7 -5.5,25.1 -10.4,36.7 -5.4,12.8 -12.3,24.8 -20.4,35.6 -9.8,12.8 -21.1,24.3 -33.6,34.2 -14,11.1 -29.3,20.4 -45.4,27.6 -19.4,8.7 -39.9,14.7 -60.8,17.7 -20.9,3 -42,2.7 -62.6,-1.2 -24.1,-4.5 -47.1,-13.5 -67.7,-26.2 -14.4,-9 -27.7,-19.7 -39.4,-31.7 -13.2,-13.6 -24.4,-29 -33,-45.5 -7.2,-13.8 -12.6,-28.7 -15.8,-44.1 -3.2,-15.4 -4.2,-31.2 -2.9,-46.7 1.3,-15.7 4.9,-31.1 10.4,-45.5 5.5,-14.5 12.8,-27.9 21.6,-40 7.7,-10.6 16.6,-20.2 26.4,-28.5 12.1,-10.3 25.4,-19 39.4,-25.7 15.7,-7.5 32.2,-13.1 49.3,-16.4 18.2,-3.5 36.8,-4.6 55.2,-3.2 26.6,2.1 52,9.2 74.8,20.9 20.3,10.4 38.6,24 54.1,39.9 12.5,12.9 23,27.7 30.7,43.6 6.3,13 10.8,26.8 13.2,40.9 2.5,14.6 2.8,29.3 0.8,43.8 -1.7,12.3 -5.1,24.4 -9.9,35.6 -6.1,14.3 -14.3,27.5 -24.3,39.1 -12.2,14 -26.4,26.1 -42.2,35.6 -19.3,11.6 -40.1,20.2 -61.9,25.1 -21.1,4.8 -42.7,5.6 -63.9,2.4 -26,-4 -50.1,-12.8 -71.1,-25.6 -15.8,-9.6 -30.1,-21.7 -42.2,-35.6 -10.4,-12 -19.2,-25.5 -25.8,-39.9 -6.8,-14.8 -11.2,-30.5 -12.9,-46.7 -1.6,-15.2 -0.8,-30.5 2.1,-45.2 2.7,-13.5 7.4,-26.5 13.8,-38.5 6.4,-12 14.5,-23.2 23.9,-33.2 11.2,-11.9 24.1,-22.1 38.2,-30.2 16.5,-9.5 34.2,-16.6 52.7,-20.9 19.9,-4.6 40.2,-6 60.3,-4.2 28.5,2.6 55.4,10.4 79.1,22.7 20.2,10.5 38.2,24.3 53.1,40.6 12.3,13.4 22.4,28.8 29.8,45.2 5.9,13.1 9.8,27 11.6,41.2 1.6,12.8 1.4,25.6 -0.4,38.2 -2.1,14.8 -6.6,29.1 -13.2,42.2 -7.5,14.8 -17.3,28.1 -28.9,39.4 -12.7,12.4 -27.1,22.8 -42.9,30.7 -18.7,9.3 -38.4,15.8 -58.7,19.2 -21.3,3.5 -42.9,3.7 -64.2,0.4 -27.2,-4.2 -52.7,-13.4 -74.8,-26.7 -16.4,-10 -31.3,-22.1 -44.1,-35.6 -11.4,-12 -21,-25.5 -28.2,-39.9 -6.9,-13.8 -11.6,-28.5 -13.8,-43.5 -2.3,-15.8 -2.3,-31.8 0,-47.5 2.2,-14.8 6.8,-29.1 13.2,-42.2 6.5,-13.2 14.8,-25.4 24.6,-36.1 10.4,-11.4 22.3,-21.3 35.2,-29.3 14.5,-8.9 30,-15.7 46.1,-20.3 17.5,-5 35.4,-7.6 53.4,-7.6z" fill="#0b0f14" stroke="#22d3ee" stroke-opacity="0.2" stroke-width="1"/>
                
                {/* Trace Lines */}
                <g>
                    {uniqueLocations.slice(0, -1).map((loc, i) => {
                         const start = cityCoordinates[loc.city];
                         const end = cityCoordinates[uniqueLocations[i+1].city];
                         if (!start || !end) return null;
                         return (
                            <line 
                                key={`line-${i}`}
                                x1={start.x} y1={start.y}
                                x2={end.x} y2={end.y}
                                stroke="url(#line-gradient)"
                                strokeWidth="2"
                                className="trace-line"
                                style={{animationDelay: `${i * 0.5}s`}}
                            />
                         )
                    })}
                </g>

                {/* Location Nodes */}
                <g>
                    {uniqueLocations.map((loc, i) => {
                        const coords = cityCoordinates[loc.city];
                        if (!coords) return null;
                        const isCurrent = i === uniqueLocations.length - 1;
                        return (
                            <g key={`node-${i}`}>
                               <circle 
                                    cx={coords.x} cy={coords.y} 
                                    r={isCurrent ? 4 : 3} 
                                    fill={isCurrent ? 'var(--primary-accent)' : '#a855f7'}
                                    stroke={isCurrent ? 'var(--primary-accent)' : 'var(--secondary-accent)'}
                                    strokeWidth="2"
                                    className={isCurrent ? 'map-node current' : 'map-node'}
                                />
                            </g>
                        )
                    })}
                </g>
                 <defs>
                    <linearGradient id="line-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="0%" style={{stopColor: 'var(--secondary-accent)', stopOpacity: 1}} />
                        <stop offset="100%" style={{stopColor: 'var(--primary-accent)', stopOpacity: 1}} />
                    </linearGradient>
                </defs>
            </svg>
        </div>
    );
};

export default WorldMap;